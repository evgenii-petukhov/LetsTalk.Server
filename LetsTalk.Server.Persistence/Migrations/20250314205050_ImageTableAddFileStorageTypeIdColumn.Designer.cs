// <auto-generated />
using System;
using LetsTalk.Server.Persistence.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LetsTalk.Server.Persistence.Migrations
{
    [DbContext(typeof(LetsTalkDbContext))]
    [Migration("20250314205050_ImageTableAddFileStorageTypeIdColumn")]
    partial class ImageTableAddFileStorageTypeIdColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("LetsTalk.Server.Domain.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalId")
                        .HasColumnType("longtext");

                    b.Property<string>("FirstName")
                        .HasColumnType("longtext");

                    b.Property<string>("ImageId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("ExternalId", "AccountTypeId")
                        .IsUnique();

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("accounttypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Facebook"
                        },
                        new
                        {
                            Id = 2,
                            Name = "VK"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Email"
                        });
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageId")
                        .HasColumnType("varchar(36)");

                    b.Property<bool>("IsIndividual")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.ChatMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ChatId");

                    b.ToTable("chatmembers");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.ChatMessageStatus", b =>
                {
                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("MessageId")
                        .HasColumnType("int");

                    b.Property<long>("DateReadUnix")
                        .HasColumnType("bigint");

                    b.HasKey("ChatId", "AccountId", "MessageId");

                    b.HasIndex("AccountId");

                    b.HasIndex("MessageId");

                    b.ToTable("chatmessagestatuses");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.FileStorageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("filestoragetypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Local"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AmazonS3"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AzureBlobStorage"
                        });
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Image", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<int>("FileStorageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int?>("Height")
                        .HasColumnType("int");

                    b.Property<int>("ImageFormatId")
                        .HasColumnType("int");

                    b.Property<int?>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileStorageTypeId");

                    b.HasIndex("ImageFormatId");

                    b.ToTable("images");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.ImageFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("imageformats");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Jpeg"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Png"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Gif"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Webp"
                        },
                        new
                        {
                            Id = -1,
                            Name = "Unknown"
                        });
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.LinkPreview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Url")
                        .IsUnique();

                    b.ToTable("linkpreviews");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<long?>("DateCreatedUnix")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageId")
                        .HasColumnType("varchar(36)");

                    b.Property<string>("ImagePreviewId")
                        .HasColumnType("varchar(36)");

                    b.Property<int?>("LinkPreviewId")
                        .HasColumnType("int");

                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("longtext");

                    b.Property<string>("TextHtml")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("ImagePreviewId")
                        .IsUnique();

                    b.HasIndex("LinkPreviewId");

                    b.HasIndex("SenderId");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Account", b =>
                {
                    b.HasOne("LetsTalk.Server.Domain.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsTalk.Server.Domain.Image", "Image")
                        .WithOne("Account")
                        .HasForeignKey("LetsTalk.Server.Domain.Account", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AccountType");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Chat", b =>
                {
                    b.HasOne("LetsTalk.Server.Domain.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.ChatMember", b =>
                {
                    b.HasOne("LetsTalk.Server.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsTalk.Server.Domain.Chat", "Chat")
                        .WithMany("ChatMembers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.ChatMessageStatus", b =>
                {
                    b.HasOne("LetsTalk.Server.Domain.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsTalk.Server.Domain.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsTalk.Server.Domain.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Chat");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Image", b =>
                {
                    b.HasOne("LetsTalk.Server.Domain.FileStorageType", "FileStorageType")
                        .WithMany()
                        .HasForeignKey("FileStorageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsTalk.Server.Domain.ImageFormat", "ImageFormat")
                        .WithMany()
                        .HasForeignKey("ImageFormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileStorageType");

                    b.Navigation("ImageFormat");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Message", b =>
                {
                    b.HasOne("LetsTalk.Server.Domain.Chat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LetsTalk.Server.Domain.Image", "Image")
                        .WithOne()
                        .HasForeignKey("LetsTalk.Server.Domain.Message", "ImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LetsTalk.Server.Domain.Image", "ImagePreview")
                        .WithOne()
                        .HasForeignKey("LetsTalk.Server.Domain.Message", "ImagePreviewId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LetsTalk.Server.Domain.LinkPreview", "LinkPreview")
                        .WithMany()
                        .HasForeignKey("LinkPreviewId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LetsTalk.Server.Domain.Account", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Image");

                    b.Navigation("ImagePreview");

                    b.Navigation("LinkPreview");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Chat", b =>
                {
                    b.Navigation("ChatMembers");
                });

            modelBuilder.Entity("LetsTalk.Server.Domain.Image", b =>
                {
                    b.Navigation("Account");
                });
#pragma warning restore 612, 618
        }
    }
}
